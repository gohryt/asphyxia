//go:build ignore

package main

import (
	"fmt"
	"log"
	"os"
)

const (
	ToLower = 'a' - 'A'

	template = `// Code generated by go run table_gen.go; DO NOT EDIT.
// See table_gen.go for more information about these tables.

package percent

const (
	Hex2IntTable                 = %q
	ToLowerTable                 = %q
	ToUpperTable                 = %q
	QuotedQueryShouldEscapeTable = %q
	QuotedPathShouldEscapeTable  = %q
)

`
)

func main() {
	hex2intTable := [256]byte{}

	for i := 0; i < 256; i++ {
		c := byte(16)
		if i >= '0' && i <= '9' {
			c = byte(i) - '0'
		} else if i >= 'a' && i <= 'f' {
			c = byte(i) - 'a' + 10
		} else if i >= 'A' && i <= 'F' {
			c = byte(i) - 'A' + 10
		}
		hex2intTable[i] = c
	}

	toLowerTable := [256]byte{}

	for i := 0; i < 256; i++ {
		c := byte(i)
		if c >= 'A' && c <= 'Z' {
			c += ToLower
		}
		toLowerTable[i] = c
	}

	toUpperTable := [256]byte{}

	for i := 0; i < 256; i++ {
		c := byte(i)
		if c >= 'a' && c <= 'z' {
			c -= ToLower
		}
		toUpperTable[i] = c
	}

	quotedQueryShouldEscapeTable := [256]byte{}

	for i := 0; i < 256; i++ {
		quotedQueryShouldEscapeTable[i] = 1
	}

	// ALPHA
	for i := int('a'); i <= int('z'); i++ {
		quotedQueryShouldEscapeTable[i] = 0
	}
	for i := int('A'); i <= int('Z'); i++ {
		quotedQueryShouldEscapeTable[i] = 0
	}

	// DIGIT
	for i := int('0'); i <= int('9'); i++ {
		quotedQueryShouldEscapeTable[i] = 0
	}

	// Unreserved characters
	for _, v := range `-_.~` {
		quotedQueryShouldEscapeTable[v] = 0
	}

	quotedPathShouldEscapeTable := quotedQueryShouldEscapeTable

	for _, v := range `$&+/:;=@` {
		quotedPathShouldEscapeTable[v] = 0
	}

	data := fmt.Sprintf(template, hex2intTable, toLowerTable, toUpperTable, quotedQueryShouldEscapeTable, quotedPathShouldEscapeTable)

	err := os.WriteFile("table.go", []byte(data), 0o660)
	if err != nil {
		log.Fatal(err)
	}
}
